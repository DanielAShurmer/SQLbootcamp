create or replace procedure CreateNewSubCat(Cat char, Sub char)
is
NewCId Number(4);
NewSId Number(4);
begin
select nvl(max(cid),0) into NewCId from category where description = cat;
if NewCId = 0 then
select nvl(max(cid),0)+1 into NewCId from category;
insert into category values(NewCId,Cat);
end if;
select nvl(max(sid),0)+1 into NewSId from subcategory;
insert into subcategory values(NewCId,NewSId,sub);
end;
/

------------------------------------------------------------------------------------------------------------

create or replace function TimesByTwo(X number)
return number
is
Result Number(3);
begin
Result := X * 2;
Return Result;
end;
/

create or replace function Tax(num1 Number)
return number
is
Result Number(10);
begin
result := num1 * 21/100;
return result;
end;
/

select First_Name, Salary, Tax(Salary) as TAX, Salary - Tax(Salary) as Salary_Minus_TAX from employees;

FIRST_NAME               SALARY        TAX SALARY_MINUS_TAX
-------------------- ---------- ---------- ----------------
Steven                    24000       5040            18960
Neena                     17000       3570            13430
Lex                       17000       3570            13430
Alexander                  9000       1890             7110
...                         ...        ...              ...


select timesbytwo(72) from dual;

----------------------------------------------------------------------------------------------------

create or replace function DynamicTax(Sal number)
return number
is
result number(7,2);
begin
if sal <= 499 then
result := 0;
end if;
if sal between 500 and 999 then
result := Sal * 15/100;
end if;
if sal >= 1000 then
result := Sal * 21/100;
end if;
return result;
end;
/

create or replace function ShowDepName(d_id number)
return char
is
d_name Departments.department_name%type;
begin
select department_name into d_name from departments where department_id = d_id;
return d_name;
end;
/

select First_Name,Last_Name,ShowDepName(department_id),Salary,DynamicTax(Salary) from employees;

---------------------------------------------------------------------------------------------------------

create or replace function CountSubCats(inputCId number)
return number
is
output number(5);
begin
select count(*) into output from subcategory where inputCId = CId;
return output;
end;
/

create or replace function countproductsincat(inputCId number)
return number
is
output number (5);
begin
select nvl(count(products.PId),0) into output from products,subcategory where subcategory.CId = inputCId and products.SId = Subcategory.SId;
return output;
end;
/

--------------------------------------------------------------------------------------------------------------

create or replace trigger Delete_Product
after delete on products
                                                 <for each row>
declare
begin
DBMS_Output.put_line('Record Deleted...');
end;
/

create table Sales_Backup(
PID Number(20),
qty Number(20),
Price number (20),
date1 date
);

create or replace trigger Backup_Deleted_Sale
before delete on sales
for each row
begin
insert into sales_backup values(:old.pid,:old.qty,:old.price,:old.date1);
end;
/

----------------------------------------------------------------------------------------------------------------------

create table Sales_Backup2(
PID Number(20),
qty Number(20),
Price number (20),
date1 date,
User_Who_Deleted char(30),
Deletion_Date date
);

create or replace trigger Backup_Deleted_Sale
before delete on sales
for each row
begin
insert into sales_backup2 values(:old.pid,:old.qty,:old.price,:old.date1, user, sysdate);
end;
/

create table school(
RegNo Number(3),
Name Char(20),
Marks Number(3));


create or replace trigger Insert_Into_School
before insert on school
for each row
begin
if :new.marks = 58 or :new.marks = 59 then
:new.marks := 60;
end if;
:new.name := upper(:new.name);
end;
/


insert into school values(1,'arron',58);
select * from school;

     REGNO NAME                      MARKS
---------- -------------------- ----------
         1 ARRON                        60










